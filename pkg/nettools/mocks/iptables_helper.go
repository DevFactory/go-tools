/* Copyright 2019 DevFactory FZ LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import nettools "github.com/DevFactory/go-tools/pkg/nettools"

// IPTablesHelper is an autogenerated mock type for the IPTablesHelper type
type IPTablesHelper struct {
	mock.Mock
}

// Delete provides a mock function with given fields: args
func (_m *IPTablesHelper) Delete(args nettools.IPTablesRuleArgs) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(nettools.IPTablesRuleArgs) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByComment provides a mock function with given fields: table, chain, comment
func (_m *IPTablesHelper) DeleteByComment(table string, chain string, comment string) error {
	ret := _m.Called(table, chain, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(table, chain, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteChain provides a mock function with given fields: tableName, chainName
func (_m *IPTablesHelper) DeleteChain(tableName string, chainName string) error {
	ret := _m.Called(tableName, chainName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(tableName, chainName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureChainExists provides a mock function with given fields: table, customChainName
func (_m *IPTablesHelper) EnsureChainExists(table string, customChainName string) error {
	ret := _m.Called(table, customChainName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(table, customChainName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureExistsAppend provides a mock function with given fields: args
func (_m *IPTablesHelper) EnsureExistsAppend(args nettools.IPTablesRuleArgs) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(nettools.IPTablesRuleArgs) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureExistsInsert provides a mock function with given fields: args
func (_m *IPTablesHelper) EnsureExistsInsert(args nettools.IPTablesRuleArgs) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(nettools.IPTablesRuleArgs) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureExistsOnlyAppend provides a mock function with given fields: args
func (_m *IPTablesHelper) EnsureExistsOnlyAppend(args nettools.IPTablesRuleArgs) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func(nettools.IPTablesRuleArgs) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureJumpToChainExists provides a mock function with given fields: table, customChainName, baseChainName
func (_m *IPTablesHelper) EnsureJumpToChainExists(table string, customChainName string, baseChainName string) error {
	ret := _m.Called(table, customChainName, baseChainName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(table, customChainName, baseChainName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlushChain provides a mock function with given fields: tableName, chainName
func (_m *IPTablesHelper) FlushChain(tableName string, chainName string) error {
	ret := _m.Called(tableName, chainName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(tableName, chainName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadRules provides a mock function with given fields: tableName, chainName
func (_m *IPTablesHelper) LoadRules(tableName string, chainName string) ([]*nettools.IPTablesRuleArgs, error) {
	ret := _m.Called(tableName, chainName)

	var r0 []*nettools.IPTablesRuleArgs
	if rf, ok := ret.Get(0).(func(string, string) []*nettools.IPTablesRuleArgs); ok {
		r0 = rf(tableName, chainName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*nettools.IPTablesRuleArgs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tableName, chainName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
