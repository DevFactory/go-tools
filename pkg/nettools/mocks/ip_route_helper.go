/* Copyright 2019 DevFactory FZ LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import net "net"
import nettools "github.com/DevFactory/go-tools/pkg/nettools"
import time "time"

// IPRouteHelper is an autogenerated mock type for the IPRouteHelper type
type IPRouteHelper struct {
	mock.Mock
}

// EnsureOnlyOneIPRuleExistsForFwMark provides a mock function with given fields: rule
func (_m *IPRouteHelper) EnsureOnlyOneIPRuleExistsForFwMark(rule nettools.IPRule) ([]nettools.IPRule, time.Duration, error) {
	ret := _m.Called(rule)

	var r0 []nettools.IPRule
	if rf, ok := ret.Get(0).(func(nettools.IPRule) []nettools.IPRule); ok {
		r0 = rf(rule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nettools.IPRule)
		}
	}

	var r1 time.Duration
	if rf, ok := ret.Get(1).(func(nettools.IPRule) time.Duration); ok {
		r1 = rf(rule)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(nettools.IPRule) error); ok {
		r2 = rf(rule)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EnsureOnlyOneIPRuleExistsForSourceIP provides a mock function with given fields: rule
func (_m *IPRouteHelper) EnsureOnlyOneIPRuleExistsForSourceIP(rule nettools.IPRule) ([]nettools.IPRule, time.Duration, error) {
	ret := _m.Called(rule)

	var r0 []nettools.IPRule
	if rf, ok := ret.Get(0).(func(nettools.IPRule) []nettools.IPRule); ok {
		r0 = rf(rule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nettools.IPRule)
		}
	}

	var r1 time.Duration
	if rf, ok := ret.Get(1).(func(nettools.IPRule) time.Duration); ok {
		r1 = rf(rule)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(nettools.IPRule) error); ok {
		r2 = rf(rule)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EnsureRoutes provides a mock function with given fields: entries
func (_m *IPRouteHelper) EnsureRoutes(entries []nettools.IPRouteEntry) (time.Duration, error) {
	ret := _m.Called(entries)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func([]nettools.IPRouteEntry) time.Duration); ok {
		r0 = rf(entries)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]nettools.IPRouteEntry) error); ok {
		r1 = rf(entries)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializeRoutingTablesPerInterface provides a mock function with given fields: ifaces
func (_m *IPRouteHelper) InitializeRoutingTablesPerInterface(ifaces []nettools.Interface) (time.Duration, error) {
	ret := _m.Called(ifaces)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func([]nettools.Interface) time.Duration); ok {
		r0 = rf(ifaces)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]nettools.Interface) error); ok {
		r1 = rf(ifaces)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAllIPRulesForAddress provides a mock function with given fields: ip
func (_m *IPRouteHelper) RemoveAllIPRulesForAddress(ip net.IP) ([]nettools.IPRule, time.Duration, error) {
	ret := _m.Called(ip)

	var r0 []nettools.IPRule
	if rf, ok := ret.Get(0).(func(net.IP) []nettools.IPRule); ok {
		r0 = rf(ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nettools.IPRule)
		}
	}

	var r1 time.Duration
	if rf, ok := ret.Get(1).(func(net.IP) time.Duration); ok {
		r1 = rf(ip)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(net.IP) error); ok {
		r2 = rf(ip)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveAllIPRulesForAddressesInSubnet provides a mock function with given fields: sourceSubnet
func (_m *IPRouteHelper) RemoveAllIPRulesForAddressesInSubnet(sourceSubnet net.IPNet) ([]nettools.IPRule, time.Duration, error) {
	ret := _m.Called(sourceSubnet)

	var r0 []nettools.IPRule
	if rf, ok := ret.Get(0).(func(net.IPNet) []nettools.IPRule); ok {
		r0 = rf(sourceSubnet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nettools.IPRule)
		}
	}

	var r1 time.Duration
	if rf, ok := ret.Get(1).(func(net.IPNet) time.Duration); ok {
		r1 = rf(sourceSubnet)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(net.IPNet) error); ok {
		r2 = rf(sourceSubnet)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveIPRuleForSourceIP provides a mock function with given fields: rule
func (_m *IPRouteHelper) RemoveIPRuleForSourceIP(rule nettools.IPRule) (time.Duration, error) {
	ret := _m.Called(rule)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(nettools.IPRule) time.Duration); ok {
		r0 = rf(rule)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(nettools.IPRule) error); ok {
		r1 = rf(rule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
