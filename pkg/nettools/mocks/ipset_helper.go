/* Copyright 2019 DevFactory FZ LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import net "net"

// IPSetHelper is an autogenerated mock type for the IPSetHelper type
type IPSetHelper struct {
	mock.Mock
}

// DeleteSet provides a mock function with given fields: name
func (_m *IPSetHelper) DeleteSet(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureSetExists provides a mock function with given fields: name, setType
func (_m *IPSetHelper) EnsureSetExists(name string, setType string) error {
	ret := _m.Called(name, setType)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, setType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureSetHasOnly provides a mock function with given fields: name, ips
func (_m *IPSetHelper) EnsureSetHasOnly(name string, ips []net.IP) error {
	ret := _m.Called(name, ips)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []net.IP) error); ok {
		r0 = rf(name, ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetIPs provides a mock function with given fields: name
func (_m *IPSetHelper) GetIPs(name string) ([]net.IP, error) {
	ret := _m.Called(name)

	var r0 []net.IP
	if rf, ok := ret.Get(0).(func(string) []net.IP); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IP)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
