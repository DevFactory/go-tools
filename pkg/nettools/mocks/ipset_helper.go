// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import net "net"
import nettools "github.com/DevFactory/go-tools/pkg/nettools"

// IPSetHelper is an autogenerated mock type for the IPSetHelper type
type IPSetHelper struct {
	mock.Mock
}

// DeleteSet provides a mock function with given fields: name
func (_m *IPSetHelper) DeleteSet(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureSetExists provides a mock function with given fields: name, setType
func (_m *IPSetHelper) EnsureSetExists(name string, setType string) error {
	ret := _m.Called(name, setType)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, setType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureSetHasOnly provides a mock function with given fields: name, ips
func (_m *IPSetHelper) EnsureSetHasOnly(name string, ips []net.IP) error {
	ret := _m.Called(name, ips)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []net.IP) error); ok {
		r0 = rf(name, ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureSetHasOnlyNetPort provides a mock function with given fields: name, netports
func (_m *IPSetHelper) EnsureSetHasOnlyNetPort(name string, netports []nettools.NetPort) error {
	ret := _m.Called(name, netports)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []nettools.NetPort) error); ok {
		r0 = rf(name, netports)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetIPs provides a mock function with given fields: name
func (_m *IPSetHelper) GetIPs(name string) ([]net.IP, error) {
	ret := _m.Called(name)

	var r0 []net.IP
	if rf, ok := ret.Get(0).(func(string) []net.IP); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IP)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetPorts provides a mock function with given fields: name
func (_m *IPSetHelper) GetNetPorts(name string) ([]nettools.NetPort, error) {
	ret := _m.Called(name)

	var r0 []nettools.NetPort
	if rf, ok := ret.Get(0).(func(string) []nettools.NetPort); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nettools.NetPort)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
